AWS LAMBDA

## THEORY ##

- AWS Lambda is a compute service where you can upload your code and create a Lambda function.
- AWS Lambda takes care of provisioning and managing the servers that you use to run the code.
- You don't have to worry about operating systems, patching, scaling etc. It Scales automatically.

You can use Lambda in the following ways:
1. As an event-driven compute service where AWS Lambda runs your code in response to events. These events could be changes to data in an Amazon S3 bucket or Dynamo DB table.
Functions are triggered in parallel, if multiple requests are there.
Event Based : SNS, SES, S3, Cognito etc.
2.Poll Based: SQS, Kinesis
For poll-based event sources, AWS Lambda polls the source and then invokes the Lambda function when records are detected on that source. For poll-based sources, event source mapping information is stored in AWS Lambda.
e.g AWS Lambda Pulls Events from a Kinesis Stream and Invokes a Lambda Function

- AWS Lambda natively supports Java, Go, PowerShell, Node.js, C#, Python, and Ruby code.

PRICING
1. Number of Requests: First 1 million requests are free. $0.20 per 1 million requests thereafter.
2. Duration: It is calculated from the time your code begins executing until it returns or otherwise terminates, rounded up to the nearest 100ms. The price depends on the amount of memory you allocate to your function. You are charged $0.00001667 for every GB per second used.

Why it is cool?
- No servers.
- No need for Scaling.
- Super super cheap.
Example: Amazon Echo is all Lambda.

Lambda scales out (not up) automatically.
Lambda functions are independent, 1 event = 1 function.

Lambda@Edge lets you run Lambda functions at AWS Edge Location.

1 event can = x functions if functions trigger other functions.

LAMBDA VERSIONING

When you are versioning in Lambda you can publish different versions of your lambda function.
- As a result you can work with different versions of your lambda function in your development workflow, such as development, beta and production.
- Each Lambda function has a different ARN (Amazon Resource Name) and once published it is immutable.
There are two types of ARN:
Qualified ARN and Unqualified ARN. Qualified ARN has version suffix (sth.com:version). Unqualified doesn't have that.

AWS function maintains your latest code in $LATEST version.
You can use Aliases to map to different versions of Lambda functions.
Can split traffic using aliases to different version. 
Can't split traffic using $latest. Instead use aliases. [important exam]


CONCURRENT EXECUTION
- Account Level Concurrent Execution limit is 1000.
- By Default AWS Lambda limits the concurrent executions across all functions within a given region to 1000.
- We can increase it by raising a service limit increase from AWS Support Center.
- There is function level concurrency too. Suppose we have 8 functions then if we set 200 for one function then the rest 7 have 800 in total.
- If the request exceed 1000 it won't be executed at all.

LAMBDA BEST PRACTICES
- To reuse execution context, initialize Lambda outside of aws client.
- To schedule a Lambda function use cloud watch events.
- Avoid using recurisive code in your Lambda Function.

STEP FUNCTIONS
Great way to visualize your serverless application.
Step Function automatically triggers and tracks each step.
Step function logs the state of each step so if something goes wrong you can know what and where.
AMAZON States language is what you use to define the step functions.

## Some Serverless Service ##
1. Compute (Lambda, Lambda@edge, AWS Fargate)
2. Storage (S3) + EFS
3. DB (Amazon Aurora Serverless)
4. API Proxy (Amazon API Gateway)
5. Interprocess Messaging (SQS + SNS)

## Languages Supported ##
1. Java
2. Python
3. Go
4. Node.js
5. .Net

you can't access the infrastructure that AWS Lambda runs on.

AWS Lambda stores code in Amazon S3 and encrypts it at rest.
AWS Lambda performs additional integrity checks while your code is in use.

AWS Lambda functions can be configured to run up to 15 minutes per execution.
You can set the timeout to any value between 1 second and 15 minutes.

Dead Letter Queue
Any Lambda function invoked asynchronously is retried twice before the event is discarded. If the retries fail and you're unsure why, use Dead Letter Queues (DLQ) to direct unprocessed events to an Amazon SQS queue or an Amazon SNS topic to analyze the failure.

SAM
You can deploy and manage your serverless applications using the AWS Serverless Application Model (AWS SAM).
AWS SAM is a specification that prescribes the rules for expressing serverless applications on AWS. 
This specification aligns with the syntax used by AWS CloudFormation today and is supported natively within AWS CloudFormation as a set of resource types (referred to as "serverless resources"). 
These resources make it easier for AWS customers to use CloudFormation to configure and deploy serverless applications, using existing CloudFormation APIs.

cordinating calls between lambda functions
You can use AWS Step Functions to coordinate a series of AWS Lambda functions in a specific order. 
You can invoke multiple Lambda functions sequentially, passing the output of one to the other, and/or in parallel, and Step Functions will maintain state during executions for you.

X-RAY
You can enable your Lambda function for tracing with AWS X-Ray by adding X-Ray permissions to your Lambda function’s execution role and changing your function’s “tracing mode” to “active.

Lambda@Edge supported only by Node.js for now

Q) How do I control which Amazon S3 buckets can call which AWS Lambda functions?
Using Resource Policy.
When you configure an Amazon S3 bucket to send messages to an AWS Lambda function a resource policy rule will a be created that grants access

Q) Can a single Lambda function have access to multiple VPCs?
No. Lambda functions provide access only to a single VPC. If multiple subnets are specified, they must all be in the same VPC. You can connect to other VPCs by peering your VPCs

Triggers 
API_GATEWAY
S3
SNS
Cloudwatch Logs
Cloudwatch events
AWS IOT
Alexa Skills Kit
Alexa Smart Home
Application Load Balancer
Code Commit
Cognito Sync Trigger
Dynamo DB
Kinesis
S3
SNS
SQS


default timeout
Default timeout for Lambda is 3 seconds but you can set any value between 1 and 300 seconds

MAX RAM SUPPRTED = 3GB



