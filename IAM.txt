IAM: Identity Access Management

Theory + Practical + Practice Questions and Exam Tips(AWS FAQs and Best Practices)
Practice Questions and Exam Tips
1. 3-4 Questions on IAM will be asked.
2. 
3.

It allows you to manage users and their level of acces to the AWS Console. 

What does it give you?
-Centralized control of your AWS account.
-Shared Access to your AWS account
-Granular Permission: diferent level of permission to different USER.
-Identity Federation: Basically allow users to login using credentials stored in LinkedIn, Active Directory, FaceBook etc)
-MultiFactor Authentication
-Provides temporary access for users/devices and services, as necessary.
- Allows you to setup your own password rotation Policy.
- Supports PCI DSS Compilance
- Integrates with Many Diffferent AWS Services (payments associated with Payment Card Industry)


Critical Terms

-Users
-Groups (a number of users under one set of permission)
-Roles (You create roles and can assign them to AWS resources)
e.g s3 bucket wants to access files located in s3 can be done via Roles.
-Policies (A document that defines one(or more)) permissions


IAM lab1

1.Set up your MultiFactor Authentication
2.Create Users and groups and policies

Set Password policies from the account settings

Everything will be handled by Amazon SQS, so find the optimal settings for VisibilityTimeout, maxReceiveCount and definitely configure DLQ policy.

What are IAM roles?
IAM roles are a secure way to grant permissions to entities that you trust. Examples of entities include the following:

IAM user in another account
Application code running on an EC2 instance that needs to perform actions on AWS resources
An AWS service that needs to act on resources in your account to provide its features
Users from a corporate directory who use identity federation with SAML
IAM roles issue keys that are valid for short durations, making them a more secure way to grant access.

IMPORTANT!
IAM is universal and doesn't apply to regions at this time. 
The root account is simply the account created when first setup your AWS account. It has complete admin access.
New users have no permission at all when first created.
You only get to view Access Key ID and Secret Access Key once. If you lose them you have to regenerate them.

FAQs for IAM
https://aws.amazon.com/iam/faqs/

1. You can also grant permissions for users outside of AWS (federated users)
 - By federating your AWS accounts, users can sign in to the AWS Management Console and AWS Command Line Interface (CLI) using credentials from your corporate directory.
 - To help you manage federation for multiple AWS accounts centrally, you can use AWS Single Sign-On to manage SSO access for all of your accounts in AWS Organizations. 
 - You also can add federation support to your own web and mobile applications by using Amazon Cognito.

All effects in IAM takes place immediately.

There are three types of Policies in AWS:

1. Managed Policies
2. Customer Managed Policies
3. Inline Policies


Managed Policies: A Managed Policy is an IAM Policy which is created and administered by AWS. AWS Provide Managed Policies for common use cases based on Job Function like 
AWSS3FullAccess, AWSSQSFullAccess etc.

You cannot change a permission defined in an AWS managed policy.

A single policy can be applied multiple time to Groups, roles, users etc.


Customer Managed  Policies :  It is a standalone policy that you create and administer inside your own AWS account. You can attach this policy to multiple users, groups and roles - but only within your account.

Copy an exisiting managed policy and customise it to your needs, yo. Recommended for use cases where the existing AWS Managed Policies don't meet the needs of your environment.

Inline Policy:

Strict 1:1 policy between the entity and the policy.
Delete the user and the policy gets deleted as well.
An inline policy is actually embedded within the user, group or role to which it applies.

[use case] Useful when you want to ensure permission in a policy are not inadverdently assigned to any other user, group or role than the one for which they are intended.

 assume-role-with-web-identity

 It is an API Provided by STS (Security Token Service)
 Returns temporary security credentials for users authenticated by mobile or web applications.


 Cross Account Access



Adavnced IAM

Web Identity Federation
AWS Web Identity Federation lets you give your users access to AWS resources  after they have successfully authenticated with a web-based identity provider like Amazon, Google or Facebook.

Following Successful authentication, the user recieves an authentication code from the web id provider,which they can trade for temporary AWS Security Credentials.

Cognito

Policies

Cross Account Access

Amazon Cognito provides Web Identity Federation with the following features:

Sign-Up and Sign-In to your Apps.
Access to Gues Users
Acts as an Identity Broker between your application and Web Id Providers, so you don't
need to write any additional code.
Synchronizes user data for multiple devices
Recommended for all mobile applications.

It is the recommended approach for Web Identity Federation using social media accounts like facebook.

Cognito User Pools:

User pools are user directories which is used to manage sign-up and sign-in functionality for mobile and web applications.

Users can sign in diretly to the user pool, or indirectlt via an identity provider like Facebook, Amazon or Google. Cognito acts as an identity broker between the ID provider and AWS. Successful authnetication generates a number of JWTs

Identity pools enable you to create unique identities for your users and authentiate them with identity providers. With an identity, you can obtain temporary, limited privilege AWS credentials to access other AWS services.

AWS Cognito uses sth called Push Synchronization to provide seamless experience.
It pushes the update silently using SNS whenever data is changed.

LAB -> Configure a cognito Pool

Inline vs Custom vs Managed Policies






