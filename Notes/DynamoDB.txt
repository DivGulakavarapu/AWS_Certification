DynamoDB

##THEORY##

Key terms: Tables, Items, Attributes and Documents
- Table is a mix of row and column.
- Items is basically rows.
- Attributes is column.
- Document can be written in XML, HTML and JSON.

It supports both document and key-value based model. 
It is also serverless thus a good choice for developing serverless shit.
It is always backed by solid state disks. Spread across 3 geographic locations and has 2 consistency model.

What are Consistency Models?
1. Eventual Consistency Reads (Default)
This gives best performance and ensures consistency across all copies of data  within seconds.
2. Strongly Consistent Reads
It is updated everywhere.

About Keys and Hashes
Primary Key are of two types:
1. Partition Key : A simple primary key, composed of one attribute known as the partition key. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.
2. Composite Key :  Referred to as a composite primary key, this type of key is composed of two attributes. The first attribute is the partition key, and the second attribute is the sort key.

Access Control in DyanmoDB
- Access is controlled by Identity Access Management Policies.
- Fine Grained access control using IAM Condition parameter: 
  dynamoDb:LeadingKeys to allow users to access only the items where the partition key value matches their user ID.

All about indexes in DynamoDB:

What are indexes?
In SQL databases an index is a data structure which allows you to perform fast queries on specific columns that you want included in the index and run your searches on the index-rather than on the entire dataset.

Note: It is not a good practice to have indexes in heavy write db. Also have as less indexes as possibe.
In DynamoDB two types of indexes are supported.
1. Local Secondary Index
- Can be created when you are creating the table.
- It can't be modified, added or removed later.
- It has the same partition key as your original table.
- But a different Sort Key. This way you get a different view of data organised on sort key.
- Any query based on this sort key are much faster than the usual one.
e.g Partition Key: Consumer ID
Sort Key: Account Creation Date.
5 local secondary index per table

2. Global Secondary Index
- You can create it anytime. While creating the account or add it later.
- Choose different partition key and sort key.
- Thus speeds up queries based on above.
- To speed up queries on non-key attributes, you can create a global secondary index.
- You can use the Scan operation to retrieve all of the data from a global secondary index. You must provide the base table name and the index name in the request. With a Scan, DynamoDB reads all of the data in the index and returns it to the application. You can also request that only some of the data be returned, and that the remaining data should be discarded. To do this, use the FilterExpression parameter of the Scan operation.
- Global secondary indexes inherit the read/write capacity mode from the base table.
- Global secondary indexes support eventually consistent reads.
our AWS account is charged for storage of the item in the base table and also for storage of attributes in any global secondary indexes on that table.
ex: email_id [Partition Key]
- login_time [Sort Key]
- 20 gloabl index per table

Query vs Scan
Scans:
A scan operation examines every item in the table.
By default return all data attributes.
Use the projection expression parameter to refine the scan to only return the attributes you want.
Scan Limit: [IMPORTANT] A single Query operation can retrieve a maximum of 1 MB of data

When would you use query and when would you use Scan?
Query is much more efficient than a Scan.
Scan dumps the entire table and then filters out values to provide the desired result - removing the unwanetd data.
This adds an extra step of removing the data you don't want. As the table grows the scan operation takes longer
Improve the Scan Performance by introducing parallel scans.
It can only scan 1 partition at a time.
By Default it scans data @1mb at a time.
Query operation will work on either composite key or indexes.

Query results is always sorted on sort key.
You can change the scanIndexForward parameter to do it decreasing order.
Query operation will also fetch a max of 1MB. 
Using filter will not improve the query performance. It works after the query operation is done.
Query operation by default uses eventual consistecy reads.
Improve the performance of scans and queries by introducing a smaller page size which uses fewer read operations.

Dynamo DB provision throughput

- DynamoDB provisioned throughput is measured in Capacity Units
1 Read Capacity Units = 1x strong consistent read of 4kb p/s or 2x eventual consisten read of 4kb p/s(default)
1 Write Capacity Units = 1 * 1kb per second.


DynamoDB On Demand Capacity

We don't need to specify our capacity requirement.
They will automatically scale up and down. Charges apply for reading, writing and storing data.

Question when you should use Provisioned capacity and when you should you use On-Demand capacity?
When you don't know your traffic, short lived peaks, pay per capacity etc. [On Demand]
When you know your traffic, or will have a consistent or gradual increase. [Provisioned]


DynamoDB Accelerator (DAX)

It is a fully managed , clustered in-memory cache for dynamoDB.
Delivers up to a 10x read performance improvement. Useful for black friday etc. gaming auction etc

DAX is a write through caching service, thus when data is written it is written to cache as well as back end store at the same time.
It allows you to point your dynamodb calls at the DAX cluster. If the item you are querying is in the cache it will return it.
If the item is not available in the cache then it performs the eventual consistent GetItem operation against dynamoDB.
retrieval of data from DAX reduces the read load on dynamodb tables. may be able to reduce provisioned read capacity.

When not to choose DAX
- caters only to eventual consistent read thus if your application wants strongly consistent read this shit is not an option. bruh
- For Write Intensive Application.
- Applications that do not perform many read operations.
- Applications that do not require microsecond response times.


ELASTICACHE

In memory caching. Can be used for any RDS database and also for DynamoDB.
It sits between your DB and the application. Good if your data is not changing rapidly.
There are two types of elasticache
1.memcached: Widely adopted memory object caching system. Multi Threaded. No Multi A-Z capability.
2.redis: open source in memory key value store. Supports more complex data structure. Sorted List and Sets.
         It also Supports Multi AZ

There are two types of caching mechanism

1. Lazy Loading
Only requested data is cached. First it is a miss and then it is loaded so it is available afterwards.
remove stale data using TTL.

2. Write Through
DynamoDB Transactions

ACID
- Encryption at Rest encrypts the data in DynamoDB
DynamoDB Streams
DynamoDB Streams enables solutions such as these, and many others. 
DynamoDB Streams captures a time-ordered sequence of item-level modifications in any DynamoDB table, and stores this information in a log for up to 24 hours
Useful in managing changes to table

We need to specify capacity units at the time of creation.






- there are no limits on the request capacity or storage size for a given table.

a table in Amazon SimpleDB has a strict storage limitation of 10 GB and is limited in the request capacity it can achieve (typically under 25 writes/second); it is up to you to manage the partitioning and re-partitioning of your data over additional SimpleDB tables if you need additional scale. While SimpleDB has scaling limitations, it may be a good fit for smaller workloads that require query flexibility. Amazon SimpleDB

Amazon DynamoDB stores structured data, indexed by primary key, and allows low latency read and write access to items ranging from 1 byte up to 400KB. Amazon S3 stores unstructured blobs and suited for storing large objects up to 5 TB. In order to optimize your costs across AWS services, large objects or infrequently accessed data sets should be stored in Amazon S3, while smaller data elements or file pointers (possibly to Amazon S3 objects) are best saved in Amazon DynamoDB.

 There is no explicit limitation on the number of attributes associated with an individual item,

but the aggregate size of an item, including all the attribute names and attribute values, cannot exceed 400KB.

 Api’s of DynamoDB :

CreateTable- Create a table and specifies the primary index

DescribeLimits operation to see the current limit values.

UpdateTable: Update the table ProvisionThoughput

DeleteTable: Delete the table

DescribeTable: Returns the size, index and stays information of table

ListTables: Returns the list of the table associated with current account and endpoint

PutItem: Add a new item or replace existing item if present with same private key . Also supports conditional operation to replace the specific attribute based on condition

UpdateItem – Edits an existing item's attributes. You can also use conditional operators to perform an update only if the item’s attribute values match certain conditions.

DeleteItem – Deletes a single item in a table by primary key. You can also use conditional operators to perform a delete an item only if the item’s attribute values match certain conditions.

BatchWriteItem – Inserts, replaces, and deletes multiple items across multiple tables in a single request, but not as a single transaction. Supports batches of up to 25 items to Put or Delete, with a

maximum total request size of 16 MB.

GetItem – The GetItem operation returns a set of Attributes for an item that matches the primary key. The GetItem operation provides an eventually consistent read by default. If eventually consistent

reads are not acceptable for your application, use ConsistentRead.

BatchGetItem – The BatchGetItem operation returns the attributes for multiple items from multiple tables using their primary keys. A single response has a size limit of 16 MB and returns a maximum

of 100 items. Supports both strong and eventual consistency.

Query – Gets one or more items using the table primary key, or from a secondary index using the index key. You can narrow the scope of the query on a table by using comparison operators or

expressions. You can also filter the query results using filters on non-key attributes. Supports both strong and eventual consistency. A single response has a size limit of 1 MB.

Scan – Gets all items and attributes by performing a full scan across the table or a secondary index. You can limit the return set by specifying filters against one or more attributes.

15. By default, the Scan operation is eventually consistent. However, you can modify the consistency model using the optional ConsistentRead parameter in the Scan API call. Setting the ConsistentRead parameter to true will enable you make consistent reads from the Scan operation.

16. Scan API request exceeds a 1 MB limit, the given request will terminate and fetched results will be returned along with a LastEvaluatedKey (to continue the scan in a subsequent operation).

17. The read units required is the number of bytes fetched by the scan operation, rounded to the nearest 4KB, divided by 4KB. Scanning a table with consistent reads consumes twice the read capacity as a scan with eventually consistent reads.

18. DynamoDB supports four scalar data types: Number, String, Binary, and Boolean. Additionally, DynamoDB supports collection data types: Number Set, String Set, Binary Set, heterogeneous List and heterogeneous Map. DynamoDB also supports NULL values.

19. DynamoDB supports key-value and document data structures.

20. but you can use the document SDK to pass JSON data directly to DynamoDB.

21. could create an index to let you query based on First Name, Last Name, or Zip Code. The list of friends is not a top-level element, therefore you cannot index the list of friends.

22. GetItem, BatchGetItem, Query, or Scan APIs, you can define a ProjectionExpression

23. No. There is no limit to the amount of data you can store in an Amazon DynamoDB table

24. no theoretical limit on the maximum throughput you can achieve

25. 10,000 writes/second or 10,000 reads/second,aws form

26. The service replicates data across three facilities

27. DynamoDB Auto Scaling is a fully managed feature that automatically scales up or down provisioned read and write capacity of a DynamoDB table or a global secondary index

28. Limits in DynamoDB

Capacity Unit Sizes

*One read capacity unit = one strongly consistent read per second, or two eventually consistent reads per second, for items up to 4 KB in size.

*One write capacity unit = one write per second, for items up to 1 KB in size.

*Provisioned Throughput Default Limits-For any table or global secondary index, the minimum settings for provisioned throughput are 1 read capacity unit and 1 write capacity unit.

US East (N. Virginia) Region:

Per table – 40,000 read capacity units and 40,000 write capacity units

Per account – 80,000 read capacity units and 80,000 write capacity units

All Other Regions:

Per table – 10,000 read capacity units and 10,000 write capacity units

Per account – 20,000 read capacity units and 20,000 write capacity units Note All the account's available throughput can be applied to a single table or across multiple tables.The provisioned throughput limit includes the sum of the capacity of the table together with the capacity of all of its global secondary indexes.

You can increase ReadCapacityUnits or WriteCapacityUnits as often as necessary, using the AWS Management Console or the UpdateTable operation. In a single call, you can increase the provisioned

throughput for a table, for any global secondary indexes on that table, or for any combination of these. The new settings do not take effect until the UpdateTable operation is complete

*. At the end of that same day the table and the GSI's throughput can potentially be decreased a total of 9 times each.

There is no practical limit on a table's size.

For any AWS account, there is an initial limit of 256 tables per region.

You can define a maximum of 5 local secondary indexes and 5 global secondary indexes per table.

You can project a total of up to 20 attributes into all of a table's local and global secondary indexes. This only applies to user-specified projected attributes.

his limit does not apply for secondary indexes with a ProjectionType of KEYS_ONLY or ALL.

aggregate size of an item, including all the attribute names and attribute values, cannot exceed 400KB.

In general, an attribute name must be at least 1 character long, but no greater than 64 KB long.

The minimum length of a partition key value is 1 byte. The maximum length is 2048 bytes.

There is no practical limit on the number of distinct partition key values

The minimum length of a sort key value is 1 byte. The maximum length is 1024 bytes.

A-Z,a-z,0-9,_ (underscore) ,- (hyphen) ., (dot) allowed ,for tables and secondary indexes must be at least 3 characters long, but no greater than 255 for table and secondary index name

general, an attribute name must be at least 1 character long, but no greater than 64 KB long. except below which have 255 byte

•Secondary index partition key names.

*Secondary index sort key names.

*The names of any user-specified projected attributes

The length of a String is constrained by the maximum item size of 400 KB.
A Number can have up to 38 digits of precision, and can be positive, negative, or zero.

An attribute value cannot be an empty String or empty Set (String Set, Number Set, or Binary Set). However, empty Lists and Maps are allowed.

DynamoDB supports nested attributes up to 32 levels deep.

The maximum length of any expression string is 4 KB. For example, the size of the ConditionExpression a=b is three bytes.

The maximum length of any single expression attribute name or expression attribute value is 255 bytes. For example, #name is five bytes; :val is four bytes.

The maximum number of operators or functions allowed in an UpdateExpression is 300

Do not allow more than two processes to read from the same DynamoDB Streams shard at the same time. Exceeding this limit can result in request throttling.

n general, you can have up to 10 CreateTable, UpdateTable, and DeleteTable requests running simultaneously (in any combination).

DescribeLimits should only be called periodically. You can expect throttling errors if you call it more than once in a minute.

The result set from a Query is limited to 1 MB per call. You can use the LastEvaluatedKey from the query response to retrieve more results.

The result set from a Scan is limited to 1 MB per call. You can use the LastEvaluatedKey from the scan response to retrieve more results.

29. No, an Auto Scaling policy can only be set to a single table or a global secondary indexes within a single region.

30. No, scaling up instantly to maximum capacity or scaling down to minimum capacity is not supported. Instead, you can temporarily disable Auto Scaling, set desired capacity you need manually for required duration, and re-enable Auto Scaling later.

31. When you delete a table or global secondary index from the console, its Auto Scaling policy and supporting Cloud Watch alarms are also deleted.

DynamoDB Acloud Guru Notes

1. Query operation returns the items in a table based on the primary key ,you must provide the partition key attribute and the distinct value

2. You can optionally provide the Sort or range key attribute and value to get the refine results

3. By default query operation will return all the attribute ,but we can use projectionExpression so that query will return few attribute

4. query results are always be in sorted manner(ascending ) and if sort key is number and it should be in numeric order (1 to 10) or if in alphabet the ascii order .to Reverse the order we can ScanIndexForward value to false

5. Query is eventual consistency you can gage to strongly consistence

6. Scan operation is like scanning all the table like dumping the table returns all the attributes you can use projectionExpression so that query will return few attribute

7. Query is more efficient than Scan as Scan is scanning the entire table and then filter out the value from data set .Avoid using Scan with large table that filters many results ,it can also consume your entire throughput in a single operation

8. For better performance use Query ,Get or batchGetItem instead.


What are the file formats supported by Dynamo DB.

HTML,
JSON
XML


Which of the following can be affectively used to manage this requirement?
Requirement: A popular mobile app modifies data in a DynamoDB table, at the rate of thousands of updates per second. Another application captures and stores data about these updates, providing near real time usage metrics for the mobile app.
DynamoDB Streams

DynamoDB global tables
DynamoDB global tables are ideal for massively scaled applications, with globally dispersed users. In such an environment, users expect very fast application performance. Global tables provide automatic multi-master replication to AWS regions world-wide, so you can deliver low-latency data access to your users no matter where they are located.

Q: How do I update and query data items with DynamoDB?

After you have created a table using the DynamoDB console or CreateTable API, you can use the PutItem or BatchWriteItem APIs to insert items. Then, you can use the GetItem, BatchGetItem, or, if composite primary keys are enabled and in use in your table, the Query API to retrieve the items you added to the table.


Q) How can you change your provisioned throughput?
If you would like to change your table’s provisioned throughput capacity, you can do so using the AWS Management Console, the UpdateTable API, or the PutScalingPolicy API for auto scaling

Important Methods

BatchGetItem: Max 16 MB or 100 records. If a partial result is returned, the operation returns a value for UnprocessedKeys
BatchWriteItem: The BatchWriteItem operation puts or deletes multiple items in one or more tables. A single call to BatchWriteItem can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.
It can't update items boyy
PutItem
GetItem
Scan

If you request more than 100 items BatchGetItem will return a ValidationException with the message "

Error Handling DynamoDB: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html

operators supported in DynamoDB
a AND b — true if a and b are both true.

a OR b — true if either a or b (or both) are true.

NOT a — true if a is false; false if a is true

Limit of Scan operation is 1 MB

DynamoDB supports atomic counters, where you use the UpdateItem operation to increment or decrement the value of an existing attribute without interfering with other write requests. 

If some operation under BatchWrite/PUT fails the entire operation fails?
Nope. They are not. Failed operations are under unprocessedItems(BatchWrite) &
UnprocessedKeys(BatchGetItem)

Put in place exponential backoff algorithm to handle that shit, yo

Keep the indexes to a minimum and avoid adding it in tables that experience heavy write activity.

Go thorugh this [Must] Optimising DynamoDB operations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScanGuidelines.html)
Know/review limits for DynamoDB [Question]http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html
I had quite a few DynamoDB questions about hash and range keys that I was not prepared for based on the course alone.
You need to know what each is and how to optimize each for specific queries for the best performance.

QUERY
Filter Can't contain any primary keys.
A Query operation can retrieve a maximum of 1 MB of data. 
ScannedCount — the number of items that matched the key condition expression, before a filter expression (if present) was applied.

Count — the number of items that remain, after a filter expression (if present) was applied.

The following are the valid settings for ReturnConsumedCapacity:

NONE—no consumed capacity data is returned. (This is the default.)

TOTAL—the response includes the aggregate number of read capacity units consumed.

INDEXES—the response shows the aggregate number of read capacity units consumed, together with the consumed capacity for each table and index that was accessed.
## PRACTICAL ##
LAB: Run a script on EC2 to create dynamoDB database, all right.

DynamoDB how many tables it can have per region etc?
