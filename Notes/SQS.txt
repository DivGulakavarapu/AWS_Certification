
AWS Simple Queue Service
## THEORY ##

- Amazon SQS offers distributed queue system, where messages can wait to be processed by other components.
- Messages can contain upto 256kb of text in any format. Any component can later retrieve the messages programmitically using the Amazon SQS API.
- The queue acts as a buffer between producer and consumer and helpful in cases where consumption rate is very slow or intermittent network connection is there.
- Default retention period is 4 days. You can have it for 14 days max to 1 minute minimum.
- SQS can resolve the issue of producer producing fast or consumer consumes slowly (Autoscaling or failover)
- Data transferred between Amazon SQS and Amazon EC2 within a single region is free of charge (that is, $0.00 per GB). Data transferred between Amazon SQS and Amazon EC2 in different regions is charged at Internet Data Transfer rates on both sides of the transfer.
- You can Create one SNS topic and create ,subscribe multiple SQS queues to that SNS topic ,basically you can fanned out single message to multiple SQS queues.

VISIBILITY TIMEOUT
- Immediately after a message is received, it remains in the queue. 
- To prevent other consumers from processing the message again, Amazon SQS sets a visibility timeout, a period of time during which Amazon SQS prevents other consumers from receiving and processing the message. 
- The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours.

SHORT POLLING
- By default, Amazon SQS uses short polling, querying only a subset of its servers (based on a weighted random distribution), to determine whether any messages are available for a response.

Amazon SQS offers two queue types for different application requirements.
Standard Queues(default)					FIFO Queues

1. Unlimited Throughput						High Throughput.
Supports a nearly unlimited number of 		300 operations per second. Also you can
api requests per second.					send operation for limit increase.

2. At-Least-Once Delivery					Exactly once processing.
A message is delivered at least once,       A message is delivered once and remains
but occasionly more than one copy of        available until a consumer processes
a message is delivered.						and deletes it. Duplicates aren't introduced
											into the queue.
3.Best effort ordering						First in First out delevery.
Occasionly, messages might be delivered     Messages will always be sent in FIFO
in an order different from which they are   ordering.
sent.

SQS DELAY QUEUES
- Delay queues let you postpone the delivery of new messages to a queue for a number of seconds.
- If you create a delay queue, any messages that you send to the queue remain invisible to consumers for the duration of the delay period. 
- The default (minimum) delay for a queue is 0 seconds. The maximum is 15 minutes.
- For standard queues, the per-queue delay setting is not retroactive—changing the setting doesn't affect the delay of messages already in the queue.
- For FIFO queues, the per-queue delay setting is retroactive—changing the setting affects the delay of messages already in the queue.
- SetQueueAttributes or AWS Console.

SES
- Email Messaging Service. 
- Can also be used to recieve emails which can be stored in s3.
- Incoming emails can also be used to trigger lamda functions and SNS notification.

## QUESTIONS ##

Q) Methods for changing message visibility?
1. Do it using Console
2. Use setQueueAttributes for the entire queue.
3. Use ChangeMessageVisiblity for a single message.

Q) How to enable long polling in SQS?

Q) What is the default visibility timeout?
The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours.

Q) Difference between SQS and SNS
Amazon SNS allows applications to send time-critical messages to multiple subscribers through a “push” mechanism, eliminating the need to periodically check or “poll” for updates.
Amazon SQS is a message queue service used by distributed applications to exchange messages through a polling model, and can be used to decouple sending and receiving components—without requiring each component to be concurrently available
How this is efficient?
SNS will publish to three queue when image is uploaded. Q1 will generate thumnail, q2 will do analysis and so on. This way shit will work.

